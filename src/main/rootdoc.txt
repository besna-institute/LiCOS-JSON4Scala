This is the documentation for the LiCOS's JSON library for Scala.

== Package structure ==

Notable packages includes:

=== Protocol API ===
  - [[licos.protocol.engine]] and its sub-packages contain LiCOS's Protocol framework.
    - [[licos.protocol.engine.BOX `BOX`]] is the container that manages information to give to analysis engines.
      - [[licos.protocol.engine.processing.auth.AuthBOX `AuthBOX`]] is the container that manages information to give analysis engines for authentication and authorization.
      - [[licos.protocol.engine.processing.lobby.LobbyBOX `LobbyBOX`]] is the container that manages information to give analysis engines for lobby.
      - [[licos.protocol.engine.processing.village.VillageBOX `VillageBOX`]] is the container that manages information to give analysis engines for village.
    - [[licos.protocol.engine.processing]] contains LiCOS's protocol processing engines.
      - [[licos.protocol.engine.processing.auth.AuthProcessingEngine `AuthProcessingEngine`]]
      - [[licos.protocol.engine.processing.lobby.LobbyProcessingEngine `LobbyProcessingEngine`]]
      - [[licos.protocol.engine.processing.village.VillageProcessingEngine `VillageProcessingEngine`]]
      - [[licos.protocol.engine.processing.village.server2logger.VillageProcessingEngine4Logger `VillageProcessingEngine4Logger`]]
    - [[licos.protocol.engine.analysis]] and its sub-packages contain LiCOS's protocol analysis engines.
      - [[licos.protocol.engine.analysis.auth]] contains LiCOS's protocol analysis engines for authentication and authorization such as
        [[licos.protocol.engine.analysis.auth.robot2server.AuthenticationAndAuthorizationRequestAnalysisEngine `AuthenticationAndAuthorizationRequestAnalysisEngine`]].
      - [[licos.protocol.engine.analysis.lobby]] contains LiCOS's protocol analysis engines for lobby such as
        [[licos.protocol.engine.analysis.lobby.client2server.AdvancedSearchAnalysisEngine `AdvancedSearchAnalysisEngine`]].
      - [[licos.protocol.engine.analysis.village]] contains LiCOS's protocol analysis engines for village such as
        [[licos.protocol.engine.analysis.village.client2server.BoardAnalysisEngine `BoardAnalysisEngine`]].
  - [[licos.protocol.element.auth]] contains LiCOS's protocol entities for authentication and authorization such as
    [[licos.protocol.element.auth.robot2server.AuthenticationAndAuthorizationRequestProtocol `AuthenticationAndAuthorizationRequestProtocol`]].
  - [[licos.protocol.element.lobby]] contains LiCOS's protocol entities for lobby such as
    [[licos.protocol.element.lobby.client2server.AdvancedSearchProtocol `AdvancedSearchProtocol`]].
  - [[licos.protocol.element.village]] contains LiCOS's protocol entities for village such as
    [[licos.protocol.element.village.part.AvatarProtocol `AvatarProtocol`]].

=== Async Protocol API ===
  - [[licos.protocol.engine.async]] and its sub-packages contain LiCOS's Async Protocol framework.
  - [[licos.protocol.engine.async.processing]] contains LiCOS's async protocol processing engines.
    - [[licos.protocol.engine.async.processing.auth.AuthProcessingEngine `AuthProcessingEngine`]]
    - [[licos.protocol.engine.async.processing.lobby.LobbyProcessingEngine `LobbyProcessingEngine`]]
    - [[licos.protocol.engine.async.processing.village.VillageProcessingEngine `VillageProcessingEngine`]]
    - [[licos.protocol.engine.async.processing.village.server2logger.VillageProcessingEngine4Logger `VillageProcessingEngine4Logger`]]
  - [[licos.protocol.engine.async.analysis]] and its sub-packages contain LiCOS's async protocol analysis engines.
    - [[licos.protocol.engine.async.analysis.auth]] contains LiCOS's async protocol analysis engines for authentication and authorization such as
      [[licos.protocol.engine.async.analysis.auth.robot2server.AuthenticationAndAuthorizationRequestAnalysisEngine `AuthenticationAndAuthorizationRequestAnalysisEngine`]].
    - [[licos.protocol.engine.async.analysis.lobby]] contains LiCOS's async protocol analysis engines for lobby such as
      [[licos.protocol.engine.async.analysis.lobby.client2server.AdvancedSearchAnalysisEngine `AdvancedSearchAnalysisEngine`]].
    - [[licos.protocol.engine.async.analysis.village]] contains LiCOS's async protocol analysis engines for village such as
      [[licos.protocol.engine.async.analysis.village.client2server.BoardAnalysisEngine `BoardAnalysisEngine`]].

=== JSON API (low-level API) ===
  - [[licos.json.engine]] and its sub-packages contain LiCOS's JSON framework.
    - [[licos.json.engine.BOX `BOX`]] is the container that manages information to give to analysis engines.
    - [[licos.json.engine.processing]] contains LiCOS's JSON processing engines.
      - [[licos.json.engine.processing.AuthProcessingEngine `AuthProcessingEngine`]]
      - [[licos.json.engine.processing.LobbyProcessingEngine `LobbyProcessingEngine`]]
      - [[licos.json.engine.processing.VillageProcessingEngine `VillageProcessingEngine`]]
    - [[licos.json.engine.analysis]] and its sub-packages contain LiCOS's JSON analysis engines.
      - [[licos.json.engine.analysis.auth]] contains LiCOS's JSON analysis engines for authentication and authorization such as
        [[licos.json.engine.analysis.auth.robot2server.AuthenticationAndAuthorizationRequestAnalysisEngine `AuthenticationAndAuthorizationRequestAnalysisEngine`]].
      - [[licos.json.engine.analysis.lobby]] contains LiCOS's JSON analysis engines for lobby such as
        [[licos.json.engine.analysis.lobby.client2server.AdvancedSearchAnalysisEngine `AdvancedSearchAnalysisEngine`]].
      - [[licos.json.engine.analysis.village]] contains LiCOS's JSON analysis engines for village such as
        [[licos.json.engine.analysis.village.client2server.BoardAnalysisEngine `BoardAnalysisEngine`]].
  - [[licos.json.element.auth]] contains LiCOS's JSON entities for authentication and authorization such as
    [[licos.json.element.auth.robot2server.JsonAuthenticationAndAuthorizationRequest `JsonAuthenticationAndAuthorizationRequest`]].
  - [[licos.json.element.lobby]] contains LiCOS's JSON entities for lobby such as
    [[licos.json.element.lobby.client2server.JsonAdvancedSearch `JsonAdvancedSearch`]].
  - [[licos.json.element.village]] contains LiCOS's JSON entities for village such as
    [[licos.json.element.village.JsonAvatar `JsonAvatar`]].

== How to use ==

=== Protocol API ===

See <a href="https://github.com/ktr-skmt/LiCOS-JSON4Scala/blob/master/src/test/scala/sample/ProtocolVillageMessageRunner.scala" target="_blank">src/test/scala/sample/ProtocolVillageMessageRunner.scala</a>

{{{
//TODO: Define the contractor as you like.
final class VillageBox(villageInfoFromLobby: VillageInfoFromLobby,
                       intParameter: Int,
                       stringParameter: String) extends VillageBOX(villageInfoFromLobby)

final class FlavorTextAE extends FlavorTextAnalysisEngine {
  override def process(box: VillageBOX, flavorTextProtocol: FlavorTextProtocol): Try[VillageMessageProtocol] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

final class ChatFromServerAE extends ChatAnalysisEngine {
  override def process(box: VillageBOX, chatFromServerProtocol: ChatFromServerProtocol): Try[VillageMessageProtocol] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

final class FirstMorningPhaseAE extends FirstMorningPhaseAnalysisEngine {
  override def process(box: VillageBOX, firstMorningPhaseProtocol: FirstMorningPhaseProtocol): Try[VillageMessageProtocol] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

final class MorningPhaseAE extends MorningPhaseAnalysisEngine {
  override def process(box: VillageBOX, morningPhaseProtocol: MorningPhaseProtocol): Try[VillageMessageProtocol] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

final class NoonPhaseAE extends NoonPhaseAnalysisEngine {
  override def process(box: VillageBOX, noonPhaseProtocol: NoonPhaseProtocol): Try[VillageMessageProtocol] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

final class NightPhaseAE extends NightPhaseAnalysisEngine {
  override def process(box: VillageBOX, nightPhaseProtocol: NightPhaseProtocol): Try[VillageMessageProtocol] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

final class GameResultAE extends GameResultAnalysisEngine {
  override def process(box: VillageBOX, gameResultProtocol: GameResultProtocol): Try[VillageMessageProtocol] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

object Runner extends App {

  private val processingEngineFactory: VillageProcessingEngineFactory =
    SpecificProcessingEngineFactory.create(VillagePE)
    .asInstanceOf[VillageProcessingEngineFactory]
    .set(new ChatFromServerAE())
    .set(new FlavorTextAE())
    .set(new FirstMorningPhaseAE())
    .set(new MorningPhaseAE())
    .set(new NoonPhaseAE())
    .set(new NightPhaseAE())
    .set(new GameResultAE())

  private val processingEngine: VillageProcessingEngine = processingEngineFactory.create

  private val villageInfoFromLobby = VillageInfoFromLobby(
    HumanPlayerLobby,
    HostPlayer(
      1L,
      "Anonymous",
      isAnonymous = true,
      HumanArchitecture
    ),
    Cast.playerNumRoleNumMap(15)("A"),
    1,
    RandomAvatarSetting,
    15,
    None,
    "Christopher",
    new URL("https://werewolf.world/image/0.3/character_icons/50x50/a_50x50.png")
  )

  private val anExampleOfBOX: VillageBOX = new VillageBox(villageInfoFromLobby)

  private val aJSONExampleOfTheLiCOSProtocol: String = {
    val source: BufferedSource = Source.fromURL("https://raw.githubusercontent.com/ktr-skmt/werewolfworld/gh-pages/village/example/0.3/server2client/firstMorning.jsonld")
    val json: String = source.getLines().mkString("\n")
    source.close()
    json
  }

  processingEngine.process(anExampleOfBOX, aJSONExampleOfTheLiCOSProtocol) match {
    case Success(protocol: VillageMessageProtocol) =>
      protocol.toJsonOpt foreach { json: JsValue =>
        System.err.println(Json.prettyPrint(json))
      }
    case Failure(exception: Throwable) =>
      System.err.println(exception.getMessage)
  }
}

}}}

=== Async Protocol API ===

See <a href="https://github.com/ktr-skmt/LiCOS-JSON4Scala/blob/master/src/test/scala/sample/AsyncProtocolVillageMessageRunner.scala" target="_blank">src/test/scala/sample/AsyncProtocolVillageMessageRunner.scala</a>

{{{
//TODO: Define the contractor as you like.
final class VillageBox(villageInfoFromLobby: VillageInfoFromLobby,
                       intParameter: Int,
                       stringParameter: String) extends VillageBOX(villageInfoFromLobby)

final class FlavorTextAE extends FlavorTextAnalysisEngine {
  override def process(box: VillageBOX, flavorTextProtocol: FlavorTextProtocol): Future[VillageMessageProtocol] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
      case _ => Future.failed(new VillageBOXNotFoundException())
    }
  }
}

final class ChatFromServerAE extends ChatAnalysisEngine {
  override def process(box: VillageBOX, chatFromServerProtocol: ChatFromServerProtocol): Future[VillageMessageProtocol] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
      case _ => Future.failed(new VillageBOXNotFoundException())
    }
  }
}

final class FirstMorningPhaseAE extends FirstMorningPhaseAnalysisEngine {
  override def process(box: VillageBOX, firstMorningPhaseProtocol: FirstMorningPhaseProtocol): Future[VillageMessageProtocol] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
      case _ => Future.failed(new VillageBOXNotFoundException())
    }
  }
}

final class MorningPhaseAE extends MorningPhaseAnalysisEngine {
  override def process(box: VillageBOX, morningPhaseProtocol: MorningPhaseProtocol): Future[VillageMessageProtocol] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
      case _ => Future.failed(new VillageBOXNotFoundException())
    }
  }
}

final class NoonPhaseAE extends NoonPhaseAnalysisEngine {
  override def process(box: VillageBOX, noonPhaseProtocol: NoonPhaseProtocol): Future[VillageMessageProtocol] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
      case _ => Future.failed(new VillageBOXNotFoundException())
    }
  }
}

final class NightPhaseAE extends NightPhaseAnalysisEngine {
  override def process(box: VillageBOX, nightPhaseProtocol: NightPhaseProtocol): Future[VillageMessageProtocol] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
      case _ => Future.failed(new VillageBOXNotFoundException())
    }
  }
}

final class GameResultAE extends GameResultAnalysisEngine {
  override def process(box: VillageBOX, gameResultProtocol: GameResultProtocol): Future[VillageMessageProtocol] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
      case _ => Future.failed(new VillageBOXNotFoundException())
    }
  }
}

object Runner extends App {

  private val processingEngineFactory: VillageProcessingEngineFactory =
    SpecificProcessingEngineFactory.create(VillagePE)
    .asInstanceOf[VillageProcessingEngineFactory]
    .set(new ChatFromServerAE())
    .set(new FlavorTextAE())
    .set(new FirstMorningPhaseAE())
    .set(new MorningPhaseAE())
    .set(new NoonPhaseAE())
    .set(new NightPhaseAE())
    .set(new GameResultAE())

  private val processingEngine: VillageProcessingEngine = processingEngineFactory.create

  private val villageInfoFromLobby = VillageInfoFromLobby(
    HumanPlayerLobby,
    HostPlayer(
      1L,
      "Anonymous",
      isAnonymous = true,
      HumanArchitecture
    ),
    Cast.playerNumRoleNumMap(15)("A"),
    1,
    RandomAvatarSetting,
    15,
    None,
    "Christopher",
    new URL("https://werewolf.world/image/0.3/character_icons/50x50/a_50x50.png")
  )

  private val anExampleOfBOX: VillageBOX = new VillageBox(villageInfoFromLobby)

  private val aJSONExampleOfTheLiCOSProtocol: String = {
    val source: BufferedSource = Source.fromURL("https://raw.githubusercontent.com/ktr-skmt/werewolfworld/gh-pages/village/example/0.3/server2client/firstMorning.jsonld")
    val json: String = source.getLines().mkString("\n")
    source.close()
    json
  }

  import scala.concurrent.ExceptionContext.Implicits.global

  Json2VillageMessageProtocol.toProtocolOpt(aJSONExampleOfTheLiCOSProtocol, villageInfoFromLobby) match {
    case Some(protocol: VillageMessageProtocol) =>
      Await.ready(
        processingEngine
          .process(anExampleOfBOX, protocol)
          .map { messageProtocol: VillageMessageProtocol =>
            messageProtocol.toJsonOpt.foreach { json: JsValue =>
              System.err.println(Json.prettyPrint(json))
            }
          }
          .recover {
            case error: Throwable =>
              System.err.println(error.getMessage)
          },
        Duration.Inf
      )
    case _ =>
      System.err.println("No protocol")
  }
}

}}}

=== JSON API ===

See <a href="https://github.com/ktr-skmt/LiCOS-JSON4Scala/blob/master/src/test/scala/sample/JsonVillageMessageRunner.scala" target="_blank">src/test/scala/sample/JsonVillageMessageRunner.scala</a>

{{{
//TODO: Define the contractor as you like.
final class VillageBox(intParameter: Int, stringParameter: String) extends BOX

final class ChatFromServerAE extends ChatAnalysisEngine {
  override def process(box: BOX, chatFromServer: JsonChatFromServer): Either[JsValue, JsValue] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

final class ErrorFromServerAE extends licos.json.engine.analysis.village.server2client.ErrorAnalysisEngine {
  override def process(box: BOX, error: JsonError): Either[JsValue, JsValue] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

final class FlavorTextAE extends FlavorTextAnalysisEngine {
  override def process(box: BOX, flavorText: JsonFlavorText): Either[JsValue, JsValue] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

final class GameResultAE extends GameResultAnalysisEngine {
  override def process(box: BOX, gameResult: JsonGameResult): Either[JsValue, JsValue] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

final class PhaseAE extends PhaseAnalysisEngine {
  override def process(box: BOX, phase: JsonPhase): Either[JsValue, JsValue] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

final class NextGameInvitationAE extends NextGameInvitationAnalysisEngine {
  override def process(box: BOX,
                       nextGameInvitation: JsonNextGameInvitation): Either[JsValue, JsValue] = {
    box match {
      case _: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

final class NextGameInvitationIsClosedAE extends NextGameInvitationIsClosedAnalysisEngine {

  override def process(box: BOX,
                       nextGameInvitationIsClosed: JsonNextGameInvitationIsClosed): Either[JsValue, JsValue] = {
    box match {
      case _: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

object Runner extends App {
  private val processingEngineFactory: VillageProcessingEngineFactory = SpecificProcessingEngineFactory.
    create(VillagePE).
    asInstanceOf[VillageProcessingEngineFactory].
    set(new ChatFromServerAE()).
    set(new PhaseAE()).
    set(new FlavorTextAE()).
    set(new GameResultAE()).
    set(new NextGameInvitationAE()).
    set(new NextGameInvitationIsClosedAE()).
    set(new ErrorFromServerAE())

  private val processingEngine: VillageProcessingEngine = processingEngineFactory.create

  private val aJSONExampleOfTheLiCOSProtocol: String = {
    val source: BufferedSource = Source.fromURL("https://raw.githubusercontent.com/ktr-skmt/werewolfworld/gh-pages/village/example/0.3/server2client/firstMorning.jsonld")
    val json: String = source.getLines().mkString("\n")
    source.close()
    json
  }

  private val anExampleOfBOX: BOX = new VillageBox(3, "test")

  processingEngine.process(anExampleOfBOX, aJSONExampleOfTheLiCOSProtocol) match {
    case Right(jsValue: JsValue) =>
      println("Send a response:")
      println(Json.prettyPrint(jsValue))
    case Left(jsValue: JsValue) =>
      println("Send no response")
      println(Json.prettyPrint(jsValue))
  }

}
}}}